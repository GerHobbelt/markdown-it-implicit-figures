{"version":3,"file":"markdownItAbbr.js","sources":["../index.js"],"sourcesContent":["\n/**\n * A `markdown-it` plugin for parsing image/video/audio/link references inside\n * markdown paragraphs without any other content as `<figure>`, `<video>`, `<audio>` elements.\n */\n\n// from html5-media\n// We can only detect video/audio files from the extension in the URL.\n// We ignore MP1 and MP2 (not in active use) and default to video for ambiguous\n// extensions (MPG, MP4)\nconst validAudioExtensions = [ 'aac', 'm4a', 'mp3', 'oga', 'ogg', 'wav' ];\nconst validVideoExtensions = [ 'mp4', 'm4v', 'ogv', 'webm', 'mpg', 'mpeg' ];\n\n/**\n * A fork of the built-in image tokenizer which guesses video/audio files based\n * on their extension, and tokenizes them accordingly.\n * <markdown-it/lib/rules_inline/image.js>\n * From html5-media\n *\n * @param {Object} state\n *  Markdown-It state\n * @param {Boolean} silent\n *  if true, only validate, don't tokenize\n * @param {MarkdownIt} md\n *  instance of Markdown-It used for utility functions\n * @returns {Boolean}\n * @memberof HTML5Media\n */\nfunction tokenizeImagesAndMedia(state, silent, md) {\n  let attrs, code, content, label, labelEnd, labelStart, pos, ref, res, title,\n      token, tokens, start;\n  let href = '',\n      oldPos = state.pos,\n      max = state.posMax;\n\n  // Exclamation mark followed by open square bracket - ![ - otherwise abort\n  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false; }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 2;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n\n  // Parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28 /* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!md.utils.isSpace(code) && code !== 0x0A /* LF \\n */) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!md.utils.isSpace(code) && code !== 0x0A /* LF \\n */) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!md.utils.isSpace(code) && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    // here goes link info string parsing, possibly in the future\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29 /* ) */) {\n      state.pos = oldPos;\n      return false;\n    }\n    pos++;\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B /* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[md.utils.normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //state.pos = pos; // not in upstream\n  //state.posMax = max; // not in upstream\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd);\n\n    state.md.inline.parse(\n      content,\n      state.md,\n      state.env,\n      tokens = []\n    );\n\n    // html5-media changes start here! ///////////////////////////////////////\n    const mediaType = guessMediaType(href);\n    const tag = (mediaType === 'image') ? 'img' : mediaType;\n\n    token = state.push(mediaType, tag, 0);\n    token.attrs = attrs = [\n      [ 'src', href ]\n    ];\n    if (mediaType === 'image') { attrs.push([ 'alt', '' ]); } // actual value is set in renderer.js\n    // html5-media changes end here! /////////////////////////////////////////\n    token.children = tokens;\n    token.content = content;\n\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n}\n\n/**\n * Guess the media type represented by a URL based on the file extension,\n * if any\n *\n * @param {String} url\n *  any valid URL\n * @returns {String}\n *  a type identifier: 'image' (default for all unrecognized URLs), 'audio'\n *  or 'video'\n */\nfunction guessMediaType(url) {\n  const extensionMatch = url.match(/\\.([^/.]+)(?:\\?.*)?(?:#.*)?$/);\n  if (extensionMatch === null) { return 'image'; }\n  const extension = extensionMatch[1];\n  if (validAudioExtensions.indexOf(extension.toLowerCase()) !== -1) {\n    return 'audio';\n  } else if (validVideoExtensions.indexOf(extension.toLowerCase()) !== -1) {\n    return 'video';\n  }\n  return 'image';\n}\n\n/**\n * Render tokens of the video/audio type to HTML5 tags\n *\n * This does not use the usual markdown-it Renderer conventions.\n *\n * @param {Object} tokens\n *  token stream\n * @param {Number} idx\n *  which token are we rendering\n * @param {Object} options\n *  Markdown-It options, including this plugin's settings\n * @param {Object} env\n *  Markdown-It environment, potentially including language setting\n * @param {MarkdownIt} md\n *  instance used for utilities access\n * @returns {String}\n *  rendered token\n */\nfunction renderMedia(tokens, idx, options, env, md) {\n  const token = tokens[idx];\n  const type = token.type;\n  if (type !== 'video' && type !== 'audio') { return ''; }\n  let attrs = options.html5Media[`${type}Attrs`].trim();\n  if (attrs) { attrs = ' ' + attrs; }\n\n  // We'll always have a URL for non-image media: they are detected by URL\n  const url = token.attrs[token.attrIndex('src')][1];\n\n  // Title is set like this: ![descriptive text](video.mp4 \"title\")\n  const title = token.attrIndex('title') !== -1 ?\n    ` title=\"${md.utils.escapeHtml(token.attrs[token.attrIndex('title')][1])}\"` :\n    '';\n\n  const description = token.content ?\n    '\\n' + [ md.utils.escapeHtml(token.content) ] :\n    '';\n\n  return `<${type} src=\"${url}\"${title}${attrs}>\\n` +\n    `${description}\\n` +\n    `</${type}>`;\n}\n\n/**\n * The main plugin function, exported as module.exports\n *\n * @param {MarkdownIt} md\n *  instance, automatically passed by md.use\n * @param {Object} [options]\n *  configuration\n * @param {String} [options.videoAttrs='controls class=\"html5-video-player\"']\n *  attributes to include inside `<video>` tags\n * @param {String} [options.audioAttrs='controls class=\"html5-audio-player\"']\n *  attributes to include inside `<audio>` tags\n */\nexport default function implicitFiguresPlugin(md, options) {\n  options = options || {};\n\n  const videoAttrs = options.videoAttrs !== undefined ?\n    options.videoAttrs :\n    'controls class=\"html5-video-player\"';\n  const audioAttrs = options.audioAttrs !== undefined ?\n    options.audioAttrs :\n    'controls class=\"html5-audio-player\"';\n\n  function implicitFigures(state) {\n    // reset tabIndex on md.render()\n    let tabIndex = 1;\n\n    // do not process first and last token\n    for (let i = 1, l = state.tokens.length; i < (l - 1); ++i) {\n      let token = state.tokens[i];\n\n      if (token.type !== 'inline') { continue; }\n      // children: image alone, or link_open -> image -> link_close\n      if (!token.children || (token.children.length !== 1 && token.children.length !== 3)) { continue; }\n      // one child, should be img **or video or audio or link**\n      if (token.children.length === 1 && token.children[0].type !== 'image') { continue; }\n      // three children, should be image enclosed in link\n      if (token.children.length === 3 &&\n          (token.children[0].type !== 'link_open' ||\n           token.children[1].type !== 'image' ||\n           token.children[2].type !== 'link_close')) {\n        continue;\n      }\n      // prev token is paragraph open\n      if (i !== 0 && state.tokens[i - 1].type !== 'paragraph_open') { continue; }\n      // next token is paragraph close\n      if (i !== (l - 1) && state.tokens[i + 1].type !== 'paragraph_close') { continue; }\n\n      // We have inline token containing an image only.\n      // Previous token is paragraph open.\n      // Next token is paragraph close.\n      // Lets replace the paragraph tokens with figure tokens.\n      let figure = state.tokens[i - 1];\n      figure.type = 'figure_open';\n      figure.tag = 'figure';\n      state.tokens[i + 1].type = 'figure_close';\n      state.tokens[i + 1].tag = 'figure';\n\n      if (options.dataType === true) {\n        // if inside link, image/video is second child\n        figure = (token.children.length === 1) ? token.children[0] : token.children[1];\n        // Get data type\n        let src = figure.attrs.find(item => item[0] === 'src')[1];\n        let dataType = src.match(/(mp4|webm|ogg)$/) ? 'video' : 'image';\n        state.tokens[i - 1].attrPush([ 'data-type', dataType ]);\n      }\n      var image;\n\n      if (options.link === true && token.children.length === 1) {\n        image = token.children[0];\n        token.children.unshift(\n          new state.Token('link_open', 'a', 1)\n        );\n        token.children[0].attrPush([ 'href', image.attrGet('src') ]);\n        token.children.push(\n          new state.Token('link_close', 'a', -1)\n        );\n      }\n\n      // for linked images, image is one off\n      image = token.children.length === 1 ? token.children[0] : token.children[1];\n\n      if (options.figcaption === true) {\n        if (image.children && image.children.length) {\n          token.children.push(\n            new state.Token('figcaption_open', 'figcaption', 1)\n          );\n          token.children.splice(token.children.length, 0, ...image.children);\n          token.children.push(\n            new state.Token('figcaption_close', 'figcaption', -1)\n          );\n          image.children.length = 0;\n        }\n      }\n\n      if (options.copyAttrs && image.attrs) {\n        const f = options.copyAttrs === true ? '' : options.copyAttrs;\n        figure.attrs = image.attrs.filter(([ k, v ]) => k.match(f));\n      }\n\n      if (options.tabindex === true) {\n        // add a tabindex property\n        // you could use this with css-tricks.com/expanding-images-html5\n        state.tokens[i - 1].attrPush([ 'tabindex', tabIndex ]);\n        tabIndex++;\n      }\n    }\n  }\n\n  md.core.ruler.before('replacements', 'implicit_figures', implicitFigures);\n\n  // from html5-media: replace image rule with images and media function\n  md.inline.ruler.at('image', (tokens, silent) => tokenizeImagesAndMedia(tokens, silent, md));\n  // from html5-media: set render rules for video and audio tokens to an anonymous function that calls renderMedia()\n  md.renderer.rules.video = md.renderer.rules.audio =\n    (tokens, idx, opt, env) => {\n      opt.html5Media = {\n        videoAttrs,\n        audioAttrs\n      };\n      return renderMedia(tokens, idx, opt, env, md);\n    };\n\n}\n"],"names":["validAudioExtensions","validVideoExtensions","tokenizeImagesAndMedia","state","silent","md","attrs","code","content","label","labelEnd","labelStart","pos","ref","res","title","token","tokens","start","href","oldPos","max","posMax","src","charCodeAt","helpers","parseLinkLabel","utils","isSpace","parseLinkDestination","ok","normalizeLink","str","validateLink","parseLinkTitle","env","references","slice","normalizeReference","inline","parse","mediaType","guessMediaType","tag","push","children","url","extensionMatch","match","extension","indexOf","toLowerCase","renderMedia","idx","options","type","html5Media","trim","attrIndex","escapeHtml","description","implicitFiguresPlugin","videoAttrs","undefined","audioAttrs","implicitFigures","tabIndex","i","l","length","figure","dataType","find","item","attrPush","image","link","unshift","Token","attrGet","figcaption","splice","copyAttrs","f","filter","k","v","tabindex","core","ruler","before","at","renderer","rules","video","audio","opt"],"mappings":"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"}